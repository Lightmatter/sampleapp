version: 2.1
orbs:
  python: circleci/python@0.1
  node: circleci/node@1.1.6
  heroku: circleci/heroku@1.0.1
  codecov: codecov/codecov@1.0.5
  slack: circleci/slack@3.4.2
  test-runner: ghostinspector/test-runner@1.0.0
jobs:
  test:
    docker:
      - image: circleci/python:3.8-node-browsers
      - image: circleci/postgres:12-alpine-postgis-ram
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: circle_test
      - image: circleci/redis

    environment:
      DJANGO_SETTINGS_MODULE: sampleapp.sampleapp.settings.circleci

    working_directory: /home/circleci/project

    steps:
      - checkout

      - python/load-cache
      - run: sudo apt-get update && sudo apt-get install -y gdal-bin python-gdal python3-gdal
      - python/install-deps
      - python/save-cache
        #TODO: caching the dev requirements requires caching the bins they install as well, figure out how to do that
      - run: pip install --user -r requirements-dev.txt

      - node/with-cache:
          steps:
            - run: yarn install --frozen-lockfile
            - run: yarn add webpack
            - run: yarn run build

      - run: scripts/validate.sh
      - run: yarn run test --ci --watchAll=false --collectCoverage=true
      - run: mkdir test_reports
      - run: mv coverage test_reports/next
      - run: coverage run --source='.' manage.py test
      - store_test_results:
          path: test_reports
      - codecov/upload
      - slack/status:
          fail_only: true
          channel: "#sampleapp-internal"
          only_for_branches: develop,master
  build:
    machine: true
    parameters:
      environment:
        description: environment string
        type: string
        default: development
    steps:
     - checkout
     - run: docker build -t "lightmatter/sampleapp:$CIRCLE_SHA1"
        --build-arg DATABASE_URL=""
        --build-arg ALLOWED_HOSTS="*"
        --build-arg ENVIRONMENT="<< parameters.environment >>"
        --build-arg NEXT_PUBLIC_ENVIRONMENT="<< parameters.environment >>"
        --build-arg SENTRY_DSN
        --build-arg NEXT_PUBLIC_SENTRY_DSN
        --build-arg APP_VERSION_RELEASE=$CIRCLE_SHA1
        --build-arg NEXT_PUBLIC_APP_VERSION_RELEASE=$CIRCLE_SHA1
        --build-arg NEXT_PUBLIC_API_BASE_URL=''
        --build-arg NEXT_PUBLIC_BUILD_TIME="$(date)"
        --build-arg SERVER_BASE_URL='http://127.0.0.1:8000'
        project/Dockerfile

  deploy:
    parameters:
      app-name:
        description: destination app
        type: string
        default: sampleapp-dev
    docker:
      - image: cimg/base:2020.01
    working_directory: /home/circleci/project
    steps:
      - checkout
      - heroku/install
      - heroku/deploy-via-git:
          app-name: << parameters.app-name >>
      - slack/status:
          channel: "#sampleapp-internal"

  # ghostinspector:
  #   docker:
  #     - image: cimg/base:2020.01
  #   steps:
  #     - test-runner/execute-suite:
  #         start-url: '<URL GOES HERE>'
  #         id: ID_GOES_HERE

workflows:
  version: 2.1
  test:
    jobs:
      - test:
          context: lightmatter

      - build:
          name: build-dev
          context: lightmatter
          environment: development
          requires:
            - test
          filters:
            branches:
              only: develop

      - deploy:
          name: deploy-dev
          context: lightmatter
          app-name: sampleapp-dev
          requires:
            - build-dev

      - deploy:
          name: deploy-staging
          context: lightmatter
          app-name: sampleapp-staging
          requires:
            - test
          filters:
            branches:
              only: staging

      - build:
          name: build-prod
          context: lightmatter
          environment: production
          requires:
            - test
          filters:
            branches:
              only: master

      - deploy:
          name: deploy-prod
          context: lightmatter
          app-name: sampleapp-prod
          requires:
            - build-prod

      # - ghostinspector:
      #     context: lightmatter
      #     requires:
      #       - deploy-dev
